<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//2D ARRAY WITH ENEMY DATA [0 Number of the Enemy, 0 legs of enemy 1 collision imminent?]
EnemyArray[0,0] = 0

EnemyInactivityDistance = 2000
alarm[0] = room_speed*2

//ENEMY TYPE/QUANTITY SETUP

ExplodeEnemyMax = 10


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var i;
 for (i = 0; i &lt; array_height_2d(EnemyArray); i += 1) //Loop Through Full Array
    {
         //Is it actually an enemy? Or just a blank array slot
         if EnemyArray[i,0] = 0{}
         else {
                  
              //Is the body going to hit another enemy? If it is, put it on a LIST.
             with (EnemyArray[i,1]) if place_meeting (x+hspeed,y+vspeed,oEnemy){
                 //Add enemy to list of collision problems
                 (oEnemyArrayController.EnemyArray[i,2]) = 1
                 } 
                else {(oEnemyArrayController.EnemyArray[i,2]) = 0}
           
         }
    }

//RESET ALARM         
alarm[0] = room_speed*0.5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//TESTING ARRAYS LIKE A BOSSSSSSS
if instance_exists(oPlayer){

//SPAWN ENEMIES

//CHECK NUMBER OF FOES, CHOOSE LOCATION TO SPAWN
if instance_number (oEnemyBody) &lt;30 {
    if choose(true,false){
    SpawnX = random_range(150,room_width-150)
    SpawnY = choose(150, room_height-150)
    } 
    else{
    SpawnX = choose(150, room_width-150)
    SpawnY = random_range(150,room_height-150)
    }
    
//CHOOSE ENEMY TYPE TO SPAWN
if instance_number (oExplodeEnemyBody) &lt;ExplodeEnemyMax {
SpawnType = oExplodeEnemyBody
SpawnTypeLegs = oExplodeEnemyLegs
} else {
SpawnType = oStandardEnemyBody
SpawnTypeLegs = oStandardEnemyLegs
}
    
    //Choose an enemy type and spawn it, add it to array
    var i = array_height_2d(EnemyArray); {
    NewEnemy = instance_create (SpawnX,SpawnY,SpawnType)
    EnemyArray[i,0] = NewEnemy
    NewEnemy.EnemyID = i
    NewEnemyLegs = instance_create (SpawnX,SpawnY,SpawnTypeLegs)
    EnemyArray[i,1] = NewEnemyLegs
    EnemyArray[i,2] = 0
    }
}

    //MOVE EACH ENEMY IN THE ARRAY
      //Set up some variables to save CPU!
                var playerlocx = oPlayer.x
                var playerlocy = oPlayer.y
    {var i;
     for (i = 0; i &lt; array_height_2d(EnemyArray); i += 1) //Loop Through Full Array
        
        
         //Is it actually an enemy? Or just a blank array slot
         if EnemyArray[i,0] = 0 {}
         
             else {
                                          
             
                 //OK, it's an enemy. Make sure your body is where your legs are.
                {var xx,yy;
                xx = EnemyArray[i,1].x
                yy = EnemyArray[i,1].y
                    with (EnemyArray[i,0]) {
                    x = xx
                    y = yy
                    }
                
                    //ENEMY FAR AWAY, NO CLEVER STUFF NEEDED
                    if point_distance (xx,yy,playerlocx,playerlocy) &gt;EnemyInactivityDistance{
                    EnemyArray[i,2] = 0
                    }
                
                }
              
                //Collision Problem - check to see if it can make a mad dash?
                if EnemyArray[i,2] = 1 and collision_line(xx,yy,playerlocx,playerlocy,oEnemy,false,true) =noone{
                EnemyArray[i,2] = 0
                    with (EnemyArray[i,1]) { image_angle = point_direction (xx,yy,playerlocx,playerlocy)
                    }
                }
                
                 //Collision Problem
                if EnemyArray[i,2] = 1 {
                     //GIVE CRAB DATA NEEDED FOR EVASION
                         with (EnemyArray[i,1]) {
                         
                         if collision_line(xx,yy,playerlocx,playerlocy,oEnemy,false,true) =noone
                       
                         
                         
                         
                             //TEMPORARILY MOVE CRAB MILES AWAY TO GET ACCURATE NEAREST DATA
                             
                             var xx,yy;
                             xx = x;
                             yy = y;
                             x = xx + 50000;
                             y = yy + 50000;            
                             var EnemyColliding = instance_nearest(xx,yy,oEnemy);
                             x = xx;
                             y = yy;
                         
                           enemylocx = EnemyColliding.x;
                           enemylocy = EnemyColliding.y;
                             
                                 var turnSpeed = 1.2;
                                 var  accuracy = 0.4;
                                 var enemyspeed = 200/room_speed;            
                            EnemyTurning(enemylocx,enemylocy,x,y,turnSpeed,accuracy,image_angle,enemyspeed)
                            speed = enemyspeed
                         }
                    } else {
                    //MOVE AS NORMAL
                      
                        with (EnemyArray[i,1]) {
                            var turnSpeed = choose(0.7,0.8,0.9)
                            var accuracy = 0.2;
                            var facingDir = image_angle;
                            var enemyspeed = 300/room_speed;
                            
                            if collision_line(x,y,playerlocx,playerlocy,oEnemy,false,true) =noone{
                            enemyspeed += (enemyspeed - 500/room_speed) *0.01;    
                            }
                            EnemyTurning(x,y,playerlocx,playerlocy,turnSpeed,accuracy,facingDir,enemyspeed)
                            speed = enemyspeed
                        }
                    }
                           
                                          
                      //OBJECT COLLISION CHECK
                     with (EnemyArray[i,1]) if place_meeting (x+(hspeed*3),y+(vspeed*3),oSolidObject){
                     vspeed = vspeed*-1
                     hspeed = hspeed*-1
                    speed = 600/room_speed
                     }
               }
                
                 
            } //CLOSES OFF ARRAY LOOP
      
    }


    //ABANDONED CODE
    /*Check if there's a old slot in the array that can be used
    var i;
     i = array_length_1d(oEnemyArrayController.EnemyArray) //See how many enemy array entries exist
     
         repeat(array_length_1d(oEnemyArrayController.EnemyArray)) {
         if oEnemyArrayController.EnemyArray[i] = 0 {
         //Oh! There is a free gap. Make the new enemy fill the old gap.
        with (oEnemyArrayController) EnemyArray[i] = NewEnemy.id
         //EXIT
         exit
         } else {
         i -= 1;
         }
         //There aren't any gaps, create a new entry
             if i &lt;= 0 {   
             with (oEnemyArrayController) EnemyArray[array_length_1d(oEnemyArrayController.EnemyArray)] = NewEnemy.id
             }
         }    */         
            


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
