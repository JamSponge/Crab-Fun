<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Grid

// -1 = blank

gridmax=40
gridoutofbounds= gridmax div 10
gridmiddlebegin= (gridmax div 4)-1
gridmiddleend= (gridmax div 1.33)-1

grid = ds_grid_create(gridmax,gridmax)

ds_grid_set_region(grid,0,0,gridmax-1,gridmax-1,-1)

//ADD RANDOM POOLS

var HowManyPools = choose(3,4,5,6)
while HowManyPools &gt;=0
    {
    //POOL SIZE
    var PoolWidth, PoolHeight
    PoolWidth = round(random(8))
        if PoolWidth &gt;4
        {
        PoolHeight = choose(2,3,4)
        }
    else
    PoolHeight = choose(4,5,6,7,8)
    
    //POOL POSITION LOL RACING ETC
    var RandomX, RandomY;
    RandomX = round(random_range(gridoutofbounds,gridmax-(gridoutofbounds*2)))
    RandomY = round(random_range(gridoutofbounds,gridmax-(gridoutofbounds*2)))
    
    //PLACE THE POOLS PLEASE, GENTLEMEN
    ds_grid_set_region(grid,RandomX,RandomY,(RandomX+PoolWidth),(RandomY+PoolHeight),2)
    HowManyPools--
    }

//SCAN THROUGH GRID
for (var row=0; row&lt;ds_grid_height(grid); row++)
{
    for (var col=0; col&lt;ds_grid_width(grid); col++)
    {
    //SET THE OUTER SEA LIMITS, YE BLUBBY LUBBER
    if col &lt;=3 || col &gt;=gridmax-4 || row &lt;=3 || row &gt;=gridmax-4 
    {grid[# col, row] = 0}


//SORT OUT THE POOLS
 if (grid[# col, row] == 2)
        {
        if RollD20(18) = true
                {
                grid[# col, row] = 1
                }
                else
                grid[# col, row] = 0
        }

//SCAN THROUGH ALL NON-ASSIGNED TILES
    if (grid[# col, row] == -1)
        {
         //ENSURE MIDDLE AREA IS MOSTLY BEACH
        if col &gt; gridmiddlebegin 
        &amp;&amp; col &lt; gridmax-gridmiddlebegin
        &amp;&amp; row &gt; gridmiddlebegin 
        &amp;&amp; row &lt; gridmax-gridmiddlebegin
        {
                grid[# col, row] = 1
                if RollD20(2) = true
                    {
                    grid[# col, row] = 1
                    }
                    else
                    grid[# col, row] = 0
            
            //ALLOW OUTER AREAS TO BE SEA-ISH
         }   
            else
            if RollD20(15) = true
                {
                grid[# col, row] = 1
                }
                else
                grid[# col, row] = 0
         
        }
        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var row=0; row&lt;ds_grid_height(grid); row++)
{
    for (var col=0; col&lt;ds_grid_width(grid); col++)
    {
    
    var subimage = grid[# col, row]
        
    draw_sprite(spr_leveltiles, subimage, col*128, row*128);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
