<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_number (oEnemyBody) &lt;50
and instance_exists(oPlayer){
    if choose(true,false){
    SpawnX = random_range(150,room_width-150)
    SpawnY = choose(150, room_height-150)
    } 
    else{
    SpawnX = choose(150, room_width-150)
    SpawnY = random_range(150,room_height-150)
    }
    
    //Choose an enemy type and spawn it
    NewEnemy = instance_create (SpawnX,SpawnY, choose(oStandardEnemyBody, oExplodeEnemyBody))
    
    //ADD ENEMY TO ARRAY
    with (oEnemyArrayController) EnemyArray[array_length_1d(oEnemyArrayController.EnemyArray)] = NewEnemy.id
    
    //ABANDONED CODE
    /*Check if there's a old slot in the array that can be used
    var i;
     i = array_length_1d(oEnemyArrayController.EnemyArray) //See how many enemy array entries exist
     
         repeat(array_length_1d(oEnemyArrayController.EnemyArray)) {
         if oEnemyArrayController.EnemyArray[i] = 0 {
         //Oh! There is a free gap. Make the new enemy fill the old gap.
        with (oEnemyArrayController) EnemyArray[i] = NewEnemy.id
         //EXIT
         exit
         } else {
         i -= 1;
         }
         //There aren't any gaps, create a new entry
             if i &lt;= 0 {   
             with (oEnemyArrayController) EnemyArray[array_length_1d(oEnemyArrayController.EnemyArray)] = NewEnemy.id
             }
         }    */         
            
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
